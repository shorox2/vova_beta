from aiogram import types, Dispatcher
from tg_bot.misc.states import DatingStateGroup, AnswerStateGroup, TarifStateGroup
from aiogram.dispatcher.storage import FSMContext



async def check_name_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ù–∞–ø–∏—à–∏ —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª\n–ü—Ä–∏–º–µ—Ä: –í–ª–∞–¥–∏–º–∏—Ä –°–∞–º–æ–¥—É—Ä–æ–≤')

async def check_age_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ü–æ—Ö–æ–∂–µ —Ç—ã –æ—à–∏–±—Å—è, –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')

async def check_desc_cmd(message: types.Message, state: FSMContext):
    await message.answer('–ö–∞–∫-—Ç–æ –º–∞–ª–æ–≤–∞—Ç–æ, –º–æ–∂–µ—à—å —á—É—Ç—å –ø–æ–ø–æ–¥—Ä–æ–±–Ω–µ–µ')

async def check_tarif_cmd(message: types.Message, state: FSMContext):
    await message.answer('–í—ã–±–µ—Ä–∏ —Ç–∞—Ä–∏—Ñ–Ω—ã–π –ø–ª–∞–Ω –ø–æ–∂–∞–ª—É–π—Å—Ç–∞')


def register_check_command(dp: Dispatcher):
    dp.register_message_handler(check_name_cmd,lambda message: not message.text or len(message.text.split(' ')) != 2 ,state=DatingStateGroup.name)
    dp.register_message_handler(check_age_cmd, lambda message: not message.text.isdigit() or float(message.text) < 0 or float(message.text) > 100, state=DatingStateGroup.age)
    dp.register_message_handler(check_desc_cmd, lambda message: not message.text or len(message.text) < 3 or len(message.text.split(' ')) < 2, state= DatingStateGroup.desc )
    dp.register_message_handler(check_desc_cmd, lambda message: not message.text or len(message.text) < 3 or len(message.text.split(' ')) < 2, state= AnswerStateGroup.desc)
    dp.register_message_handler(check_tarif_cmd, lambda message: not message.text or message.text.split(' ')[0] != '–¢–∞—Ä–∏—Ñ' and message.text != '–Ø –øo–¥—É–º–∞—é üí©', state = TarifStateGroup.answer)